#!/bin/zsh

exec > >(tee -i $HOME/dotfiles_install.log)
exec 2>&1
set -x

function link_files() {
  # In some codespaces, there's no need to symlink dotfiles to $HOME
  if [[ ! $(pwd) -ef $HOME ]]; then
    ln -s $(pwd)/git/.gitignore_global ~/.gitignore_global
    ln -s $(pwd)/git/.git_template ~/.git_template
    ln -s $(pwd)/tmux/.tmux.conf ~/.tmux.conf
    ln -s $(pwd)/bin ~/bin
    ln -s $(pwd)/script/git-hooks/pre-push .git/hooks/pre-push

    rm -f ~/.gitconfig
    ln -s $(pwd)/git/.gitconfig ~/.gitconfig
    touch ~/.gitconfig-macos # create empty config file

    if [ -d "/workspaces/github/bin" ]; then
      sudo ln -s /workspaces/github/bin/rubocop /usr/local/bin/rubocop
      sudo ln -s /workspaces/github/bin/srb /usr/local/bin/srb
      sudo ln -s /workspaces/github/bin/solargraph /usr/local/bin/solargraph
    fi
  fi
}

function install_rust_and_cargo() {
  if command -v rustc >/dev/null 2>&1 && command -v cargo >/dev/null 2>&1; then
    echo "Rust and Cargo are already installed."
    echo "$(which cargo)"
  else
    echo "Installing Rust and Cargo..."
    curl https://sh.rustup.rs -sSf | sh -s -- -y
    echo "Rust and Cargo installation complete."
    echo "$HOME/.cargo/bin/cargo"
  fi
}

function install_go_packages() {
  if command -v go >/dev/null 2>&1; then
    go install golang.org/x/tools/gopls@latest
    go install github.com/incu6us/goimports-reviser/v3@latest
    go install mvdan.cc/gofumpt@latest
  else
    echo "Go is not installed. Skipping gopls installation."
  fi
}

function install_mosh_and_tailscale() {
  # Install Mosh if not present
  if ! command -v mosh-server &> /dev/null; then
    sudo apt-get update && sudo apt-get install -y mosh
  fi

  # Install Tailscale if not present
  if ! command -v tailscale &> /dev/null; then
    curl -fsSL https://tailscale.com/install.sh | sh
  fi
}

function install_software() {
  curl -sL https://deb.nodesource.com/setup_16.x | sudo bash -
  sudo apt-get install -y nodejs
  curl https://github.com/dandavison/delta/releases/download/0.13.0/git-delta_0.13.0_amd64.deb > ~/git-delta.deb
  sudo dpkg -i ~/git-delta_0.13.0_amd64.deb
  sudo npm install -g typescript-language-server typescript vscode-langservers-extracted eslint_d
  sudo apt -o DPkg::Lock::Timeout=600 install build-essential python3-venv ruby-dev fzf bat exa jq ripgrep tmux libfuse2 fuse software-properties-common -y
  install_rust_and_cargo
  install_go_packages
  install_mosh_and_tailscale
  zsh nvim/install
}

function setup_software() {
  # Setup codespace friendly name for shell prompt
  codespace_friendly_name=$(gh api "/user/codespaces/$CODESPACE_NAME" -q .display_name)
  if [[ $? -eq 0 && $codespace_friendly_name != *"Not Found"* ]]; then
    echo $codespace_friendly_name >> $HOME/.friendly_name
  fi

  # Connect to Tailscale if auth key is provided
  if [[ -n "$TAILSCALE_AUTH_KEY" ]]; then
    name=codespace-$codespace_friendly_name
    sudo tailscale up --authkey=$TAILSCALE_AUTH_KEY --hostname=$name --ssh
    echo "Tailscale connected."
  fi

  # Use remote-development-manager for copy/paste and open support
  wget https://github.com/BlakeWilliams/remote-development-manager/releases/download/v0.0.3/rdm-linux-amd64
  sudo mv rdm-linux-amd64 /usr/bin/rdm
  chmod +x /usr/bin/rdm
  gh config set browser "rdm open"

  sudo chsh -s /bin/zsh $(whoami)
  zsh zsh/install.zsh
}

# Most of this setup is for GitHub Codespaces
if [[ -n $CODESPACES ]]; then
  echo 'ðŸš€ Starting Codespaces setup.'
  echo 'ðŸ”— Linking files.'
  echo `date +"%Y-%m-%d %T"`
  link_files

  echo 'ðŸ’½ Installing software'
  echo `date +"%Y-%m-%d %T"`
  install_software

  echo 'ðŸ§° Configuring software'
  echo `date +"%Y-%m-%d %T"`
  setup_software
  echo 'âœ… Done!'
  echo `date +"%Y-%m-%d %T"`
else
  # TODO: Add setup for local machine
  zsh zsh/install.zsh
  zsh nvim/install
fi

