# remap the tmux prefix to Ctrl-a
unbind C-b
set -g prefix C-a

# allow Ctrl-a to be used in tmux when pressed repeatedly
bind-key -r C-a send-prefix

# reload tmux config
bind-key r source-file ~/.tmux.conf \; display-message "tmux reloaded!"

# seamlessly navigate between tmux sessions
bind-key C-j choose-tree

# enable pointer support for switching panes and windows.
setw -g mouse on
set-option -g -q mouse on

set -g default-terminal "screen-256color"
set -g status-keys "emacs"

# Set zsh as default shell
set-option -g default-shell /bin/zsh

#### colors

# sets the pane border to blue
setw -g pane-border-style fg='#BDCAEB',bg=default
# sets the active pane border to blue
setw -g pane-active-border-style fg='#BDCAEB',bg=default

#### status line styles

# sets the text to blue and the background to default for the status bar
set -g status-style bg=default,fg='#BDCAEB'
set -g message-style bg='#BDCAEB',fg=default

# default statusbar colors
set-window-option -g window-status-style fg='#BDCAEB',bg=default

# stands out the active window in the status bar
set -g window-status-current-format "#[fg=#BDCAEB,bold][ #I #W ]"
set -g window-status-format "#I #W"

# centers the window list
set -g status-justify centre
# shows the session name in the status line left
set -g status-left " #S "
# sets number of characters to show in the left status bar space
set -g status-left-length 30
# adds the machine name to the status line right
set -g status-right '#(machine_name)'
# refreshes the status bar every 60 seconds
set -g status-interval 60
# show changes in other windows visually
setw -g monitor-activity on

#### window and pane management

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
#      https://github.com/alexghergh/nvim-tmux-navigation

# decide whether we're in a Vim process
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -n 'C-Space' if-shell "$is_vim" 'send-keys C-Space' 'select-pane -t:.+'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
bind-key -T copy-mode-vi 'C-Space' select-pane -t:.+

# start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# renumber windows as they're destroyed
set -g renumber-windows on

# break a pane into its own window
bind-key b break-pane -d

# new windows and panes use the current path to start session
bind-key c new-window -c '#{pane_current_path}'

# hyphen shows we're adding a horizontal bar to the window
bind-key - split-window -v -c '#{pane_current_path}'
# backslash shares key with pipe, which is a vertical bar
bind-key \\ split-window -h -c '#{pane_current_path}'

# pane resizing
# shift + arrows for fine grained movement
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1

# ctrol + arrows for greater movement
bind -n C-Left resize-pane -L 10 
bind -n C-Right resize-pane -R 10
bind -n C-Down resize-pane -D 5
bind -n C-Up resize-pane -U 5

#### scroll-back / copy mode

# use vim keybindings in copy mode
setw -g mode-keys vi

# # setup 'v' to begin selection as in Vim
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# # update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
